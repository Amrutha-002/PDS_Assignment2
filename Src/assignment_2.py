# -*- coding: utf-8 -*-
"""Assignment_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1np2VWo4UVrpT84dIciRbHvIilQpK8pJJ

Step a: Handling Missing Values
"""

import pandas as pd

# Load the dataset
df = pd.read_csv('/content/train.csv')

# Check for missing values
missing_values = df.isnull().sum()

# Impute missing values
for column in df.columns:
    if df[column].dtype == 'object':
        # Impute categorical columns with mode
        df[column].fillna(df[column].mode()[0], inplace=True)
    else:
        # Impute numerical columns with mean
        df[column].fillna(df[column].mean(), inplace=True)

# Verify that there are no missing values
print(df.isnull().sum())

"""Step b: Removing Units from Attributes"""

# Remove units from specified columns
df['Mileage'] = df['Mileage'].astype(str).str.replace(' kmpl', '').str.replace(' km/kg', '').astype(float)
df['Engine'] = df['Engine'].astype(str).str.replace(' CC', '').astype(float)
df['Power'] = df['Power'].astype(str).str.replace(' bhp', '').astype(float)

# For New_Price, handle both Lakh and Crore
df['New_Price'] = df['New_Price'].astype(str).str.replace(' Cr', '').str.replace(' Lakh', '').astype(float)
# Convert Crore values to Lakh (1 Crore = 100 Lakh)
mask = df['New_Price'].astype(str).str.contains('Cr')
df.loc[mask, 'New_Price'] *= 100

# Verify the changes
print(df[['Mileage', 'Engine', 'Power', 'New_Price']].head())

"""Step c: One-Hot Encoding Categorical Variables"""

# One-hot encode 'Fuel_Type' and 'Transmission' with binary integers (0/1)
df = pd.get_dummies(
    df,
    columns=['Fuel_Type', 'Transmission'],
    drop_first=True,  # Avoid dummy variable trap by dropping the first category
    dtype=int         # Ensure encoded values are integers (0 or 1)
)

# Preview the transformed DataFrame
df.head()

"""Step d: Creating a New Feature"""

# Calculate and add 'Car_Age' based on the manufacturing year
df['Car_Age'] = 2024 - df['Year']

# Display the original year and newly created car age for verification
df.loc[:, ['Year', 'Car_Age']].head()

"""Step e: Performing Data Operations"""

# 1. Select relevant columns
selected_columns = df.loc[:, ['Name', 'Location', 'Year', 'Price']]

# 2. Filter cars priced above 10 lakhs
filtered_df = df[df['Price'] > 10]

# 3. Rename 'Price' to 'Selling_Price'
renamed_df = df.rename(columns={'Price': 'Selling_Price'})

# 4. Mutate: Calculate 'Car_Age' and 'Price_Per_Year'
mutated_df = df.copy()
mutated_df['Car_Age'] = 2024 - mutated_df['Year']
mutated_df['Price_Per_Year'] = mutated_df['Price'] / mutated_df['Car_Age']

# 5. Arrange: Sort cars by price in descending order
arranged_df = df.sort_values(by='Price', ascending=False)

# 6. Summarize: Average price per location
summary_df = df.groupby('Location', as_index=False)['Price'].mean()

# Display outputs for verification
print("▶ Selected Columns:\n", selected_columns.head())
print("\n▶ Filtered (Price > 10 lakhs):\n", filtered_df.head())
print("\n▶ Renamed 'Price' ➝ 'Selling_Price':\n", renamed_df.head())
print("\n▶ Mutated DataFrame with 'Car_Age' and 'Price_Per_Year':\n", mutated_df.head())
print("\n▶ Arranged by Price (High to Low):\n", arranged_df.head())
print("\n▶ Average Price per Location:\n", summary_df.head())